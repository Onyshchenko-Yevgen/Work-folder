1. Что такое stateless и statefull компоненты?


-Компоненты в React содержащие внутреннее состояние — state, называются Stateful. Без него — Stateless.

2. Почему react компоненты называют с большой буквы?


Если компонент начинается с маленькой буквы, React принимает его за DOM-тег. Например, <div /> это div-тег из HTML, а <Welcome /> это уже наш компонент Welcome, который должен быть в области видимости.

function Welcome(props) {
  return <h1>Привет, {props.name}</h1>
}
const element = <Welcome name="Алиса" />
ReactDOM.render(element, document.getElementById('root'))


3. Что такое условный рендеринг?

React позволяет разделить логику на независимые компоненты. Эти компоненты можно показывать или прятать в зависимости от текущего состояния.

Условный рендеринг в React работает так же, как условные выражения работают в JavaScript. Бывает нужно объяснить React, как состояние влияет на то, какие компоненты требуется скрыть, а какие — отрендерить, и как именно. В таких ситуациях используйте условный оператор JavaScript или выражения подобные if.

Рассмотрим два компонента:



function UserGreeting(props) {
  return <h1>С возвращением!</h1>
}

function GuestGreeting(props) {
  return <h1>Войдите, пожалуйста.</h1>
}
Можно создать компонент Greeting, который отражает один из этих компонентов в зависимости от того, на сайте пользователь или нет:



function Greeting(props) {
  const isLoggedIn = props.isLoggedIn
  if (isLoggedIn) {
    return <UserGreeting />
  }
  return <GuestGreeting />
}

ReactDOM.render(
  // Попробуйте заменить на isLoggedIn={true} и посмотрите на эффект.
  <Greeting isLoggedIn={false} />,
  document.getElementById('root')
)
В этом примере рендерится различное приветствие в зависимости от значения пропа isLoggedIn.


4. Зачем нужен атрибут key?


Ключи помогают React определять, какие элементы были изменены, добавлены или удалены. Их необходимо указывать, чтобы React мог сопоставлять элементы массива с течением времени:



const numbers = [1, 2, 3, 4, 5]
const listItems = numbers.map(number => <li key={number.toString()}>{number}</li>)
Лучший способ выбрать ключ – это использовать строку, которая будет явно отличать элемент списка от его соседей. Чаще всего вы будете использовать ID из ваших данных как ключи:



const todoItems = todos.map(todo => <li key={todo.id}>{todo.text}</li>)
